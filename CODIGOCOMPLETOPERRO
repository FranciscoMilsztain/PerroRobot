//Milsztain, Macia, Colombres, Reboratti

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <Adafruit_AHTX0.h>
#include <Preferences.h>
#include <ESP32Time.h>
#include <WiFi.h>
#include "time.h"
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>


//***ESTADOS***

int ESTADO = 1;
#define PANTALLA1 1
#define PANTALLA2 2
#define FASE1 3
#define FASE2 4
#define CAMBIO_UMBRAL 5
#define SUMAR_UMBRAL 6
#define RESTAR_UMBRAL 7
#define SUMAR_GMT 8
#define RESTAR_GMT 9
#define UMBRAL_TEMP_SUPERADO 10
#define UMBRAL_PRES_SUPERADO 11
#define UMBRAL_LUZ_SUPERADO 12
#define UMBRAL_GAS_SUPERADO 13
#define CAMBIO_LECTURA 14

//***FIN ESTADOS***


//***BOTONES***

  #define BOT1 1
  #define BOT2 2
  #define BOT3 3
  #define BOT4 4
  #define BOT5 5

  int lecb1;
  int lecb2;
  int lecb3;
  int lecb4;
  int lecb5;

  int bloqb1;
  int bloqb2;
  int bloqb3;
  int bloqb4;
  int bloqb5;

//***FIN BOTONES***


//***DISPLAY***

LiquidCrystal_I2C lcd_1(0x27, 16, 2);

//***FIN DISPLAY***


//***SENSORES***

  int lectura_seleccionada = 1;
  int umbral_seleccionado = 1;

  //Sensor Gas
  int pingas = 34;
  int lecgas;
  int umbgas;

  //Sensor Presion
  Adafruit_BMP280 bmp;

  float lecpres;
  float umbpres;

  //Sensor Luz
  int pinluz = 0; //CAMBIAR ESTE PIN POR UNO ANALÓGICO
  int lecluz;
  int umbluz;

  //Sensor Temp
  Adafruit_AHTX0 aht;

  float lectemp;
  float umbtemp;

//***FIN SENSORES***


//***EEPROM***

Preferences umbral_eeprom;

//***FIN EEPROM***


//***WIFI***

const char* ssid = "MECA-IoT";
const char* password = "IoT$2025";
const char* ntpServer = "pool.ntp.org";

//***FIN WIFI***


//***VARIABLES Y AJUSTES DE TIEMPO***

unsigned long timer;
unsigned long timer1000;

int segs = 0;
int mins = 0;
int horas = 0;
int GMT = -3;

int long gmtOffset_sec = -10800;
const int daylightOffset_sec = 0;

//***FIN VARIABLES TIEMPO***


//***TELEGRAM***

int bloqtelegram;

//Token del bot
#define BOTtoken "8373807622:AAFkzYRff0xraeKJD-SOddWeex2Xt4lFyYs"
//ID del chat con el bot
#define CHAT_ID "7601536385"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//***FIN TELEGRAM***


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() 
{
  Serial.begin(115200);
  Serial.println("Programa iniciado");
  Serial.println("");

//***WIFI***

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print("-"); //Se manda indefinidamente si no se logra establecer la conexión al wifi
  }
  Serial.println("WiFi conectado"); //Se manda al verificar que se logró establecer la conexión al wifi

  //El BOT manda un mensaje a telegram para anunciar que se inició
  bot.sendMessage(CHAT_ID, "BOT iniciado", "");
  
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

//***FIN WIFI***


//***BOTONES***

  pinMode(BOT1, INPUT);
  pinMode(BOT2, INPUT);
  pinMode(BOT3, INPUT);
  pinMode(BOT4, INPUT);
  pinMode(BOT5, INPUT);

//***FIN BOTONES***


//***SENSORES***

  //Sensor Presion
  bmp.begin(0x76);

  //Sensor Luz
  pinMode(pinluz, INPUT);

  //Sensor Temp
  aht.begin()

  //Sensor Gas no necesita setup
  
//***FIN SENSORES***


//***DISPLAY***

  lcd_1.init();
  lcd_1.backlight();

//***FIN DISPLAY***


//***EEPROM***

  umbral_eeprom.begin("umbrales", true); //Modo Lectura

  umbtemp = umbral_eeprom.getFloat("umbtemp", 24.0); //EEPROM TEMPERATURA
  umbgas  = umbral_eeprom.getFloat("umbgas", 24.0);  //EEPROM GAS
  umbpres = umbral_eeprom.getFloat("umbpres", 24.0); //EEPROM PRESION
  umbluz  = umbral_eeprom.getFloat("umbluz", 24.0);  //EEPROM LUZ

  umbral_eeprom.end();

  Serial.println("---Umbrales---:");
  Serial.print("Temp: "); 
  Serial.println(umbtemp);

  Serial.print("Gas: "); 
  Serial.println(umbgas);
  
  Serial.print("Presion: "); 
  Serial.println(umbpres);
  
  Serial.print("Luz: "); 
  Serial.println(umbluz);

//***FIN EEPROM***
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() 
{
  timer = millis();

  recibirtiempo();


  //***BOTONES***

  lecb1 = digitalRead(BOT1);
  lecb2 = digitalRead(BOT2);
  lecb3 = digitalRead(BOT3);
  lecb4 = digitalRead(BOT4);
  lecb5 = digitalRead(BOT5);

//***FIN BOTONES***


  switch (ESTADO)
  {
    case PANTALLA1:

//***DISPLAY***

    lcd_1.setCursor(0, 0);

    if (lectura_seleccionada == 1)
    {
      lcd_1.print("TEMP:");
      lcd_1.print(lectemp);
    }

    if (lectura_seleccionada == 2)
    {
      lcd_1.print("LUZ:");
      lcd_1.print(lecluz);
    }

    if (lectura_seleccionada == 3)
    {
      lcd_1.print("PRES:");
      lcd_1.print(lecpres);
    }

    if (lectura_seleccionada == 4)
    {
      lcd_1.print("GAS:");
      lcd_1.print(lecgas);
    }

//***FIN DISPLAY***
  
//***SENSORES***

    //Sensor Gas
    lecgas = analogRead(pingas); //Lectura gas

    //Sensor Presion
    lecpres = bmp.readPressure(); //Se lee la presion en Pascales

    //Sensor Luz
    lecluz = analogRead(pinluz); //Lectura Luz
    
    //Sensor Temp
    sensors_event_t humidity, temp;
    aht.getEvent(&humidity, &temp);
    
    lectemp = temp.temperature; //Lectura Temp (C°)
    
  //***FIN SENSORES***

    if (lecb1 == 1)
    {
      ESTADO = CAMBIO_LECTURA;
    }

    lcd_1.clear();

    break;

    case PANTALLA2:

    lcd_1.setCursor(0, 0);

    if ()
    
    break;

    case CAMBIO_LECTURA: //CAMBIAR ESTO PARA AGREGAR QUE TAMBIEN SE HAGA DISPLAY DE LA HORA

    if (lecb1 == 0)
    {
      lectura_seleccionada = lectura_seleccionada + 1;
      lcd_1.clear();

      if (lectura_seleccionada > 4) 
      {
        lectura_seleccionada = 1;
      }

      ESTADO = PANTALLA1;
    }

    if(lecb2 == 1)
    {
      ESTADO = FASE1;
    }

    break;

    case FASE1:

    if (lecb1 == 0 && lecb2 == 0)
    {
      ESTADO = PANTALLA2;
    }

    break;

    case FASE2:



    break;

    case CAMBIO_UMBRAL:



    break;

    case SUMAR_UMBRAL:



    break;

    case RESTAR_UMBRAL:



    break;

    case SUMAR_GMT:



    break;

    case RESTAR_GMT:



    break;

    case UMBRAL_TEMP_SUPERADO:



    break;

    case UMBRAL_PRES_SUPERADO:



    break;

    case UMBRAL_LUZ_SUPERADO:



    break;

    case UMBRAL_GAS_SUPERADO:



    break;
  }


//***EEPROM***

  if (lecb1 == 1 && bloqb1 == 0)
  {
    bloqb1 = 1;
    
    umbral_eeprom.begin("umbrales", false);

    umbral_eeprom.putFloat("umbtemp", umbtemp); //Actualizar Temperatura
    umbral_eeprom.putFloat("umbgas", umbgas);   //Actualizar Gas
    umbral_eeprom.putFloat("umbpres", umbpres); //Actualizar Presion
    umbral_eeprom.putFloat("umbluz", umbluz);   //Actualizar Luz

    Serial.print("Umbral de Temperatura actualizado: ");
    Serial.println(umbtemp);

    Serial.print("Umbral de Gas actualizado: ");
    Serial.println(umbgas);

    Serial.print("Umbral de Presion actualizado: ");
    Serial.println(umbpres);

    Serial.print("Umbral de Luz actualizado: ");
    Serial.println(umbluz);

    umbral_eeprom.end();
  }

  if (lecb1 == 0)
  {
    bloqb1 = 0;
  }

//***FIN EEPROM***
}

void recibirtiempo()
{
  struct tm timeinfo; //Se llama a la hora online
  
  if (!getLocalTime(&timeinfo)) {
    Serial.println("No se pudo leer la hora");
    return;
  }

  //Los valores recibidos se asignan a sus variables
  segs = timeinfo.tm_sec;
  mins = timeinfo.tm_min;
  horas = timeinfo.tm_hour;

  // Mostrar
  Serial.printf("Hora actual: %02d:%02d:%02d\n", horas, mins, segs);
}
