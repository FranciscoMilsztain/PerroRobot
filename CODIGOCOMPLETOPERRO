//Milsztain, Macia, Colombres, Reboratti

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHTX0.h>
#include <Preferences.h>
#include <ESP32Time.h>
#include <WiFi.h>
#include "time.h"
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>


//***ESTADOS***

int ESTADO = 1;
#define PANTALLA1 1
#define PANTALLA2 2
#define FASE1 3
#define FASE2 4
#define CAMBIO_UMBRAL 5
#define SUMAR_UMBRAL 6
#define RESTAR_UMBRAL 7
#define SUMAR_GMT 8
#define RESTAR_GMT 9
#define UMBRAL_TEMP_SUPERADO 10 //NO SE USA
#define UMBRAL_HUM_SUPERADO 11  //NO SE USA
#define UMBRAL_LUZ_SUPERADO 12  //NO SE USA
#define UMBRAL_GAS_SUPERADO 13  //NO SE USA
#define CAMBIO_LECTURA 14

//***FIN ESTADOS***


//***BOTONES***

  #define BOT1 25
  #define BOT2 33
  #define BOT3 32
  #define BOT4 27
  #define BOT5 16

  //INVERTIR LOS NUMEROS SI LOS BOTONES ESTAN EN PULLUP
  #define PRESIONADO 1
  #define SOLTADO 0

  int lecb1;
  int lecb2;
  int lecb3;
  int lecb4;
  int lecb5;

  int bloqb1;
  int bloqb2;
  int bloqb3;
  int bloqb4;
  int bloqb5;

//***FIN BOTONES***


//***DISPLAY***

LiquidCrystal_I2C lcd_1(0x27, 16, 2);

//***FIN DISPLAY***


//***SENSORES***

  int lectura_seleccionada = 1;
  int umbral_seleccionado = 1;

  //Sensor Gas
  int pingas = 34;
  float lecgas;
  float umbgas;

  //Sensor Luz
  int pinluz = 0; //CAMBIAR ESTE PIN POR UNO ANALÓGICO
  float lecluz;
  float umbluz;

  //Sensor Temp y humedad
  Adafruit_AHTX0 aht;

  float lectemp;
  float umbtemp;

  float lechum;
  float umbhum;

  //MAPEOS
  float maptemp; //NO HAY MAPEO DE TEMP (Se mantiene en C°)
  float mapgas; 
  float mapluz; 
  float maphum; 

//***FIN SENSORES***


//***EEPROM***

int checkeotemp = 0;
int checkeoluz = 0;
int checkeogas = 0;
int checkeohum = 0;

Preferences umbral_eeprom;

//***FIN EEPROM***


//***WIFI***

const char* ssid = "MECA-IoT";
const char* password = "IoT$2025";
const char* ntpServer = "pool.ntp.org";

//***FIN WIFI***


//***VARIABLES Y AJUSTES DE TIEMPO***

unsigned long timer;
unsigned long timer1000;

int segs = 0;
int mins = 0;
int horas = 0;
int GMT = -3;

int long gmtOffset_sec = -10800;
const int daylightOffset_sec = 0;

//***FIN VARIABLES TIEMPO***


//***TELEGRAM***

int bloqtelegram;

//Token del bot
#define BOTtoken "8373807622:AAFkzYRff0xraeKJD-SOddWeex2Xt4lFyYs"
//ID del chat con el bot
#define CHAT_ID "7601536385"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//***FIN TELEGRAM***

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() 
{
  Serial.begin(115200);
  Serial.println("Programa iniciado");
  Serial.println("");

//***WIFI***

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print("-"); //Se manda indefinidamente si no se logra establecer la conexión al wifi
  }
  Serial.println("WiFi conectado"); //Se manda al verificar que se logró establecer la conexión al wifi

  //El BOT manda un mensaje a telegram para anunciar que se inició
  bot.sendMessage(CHAT_ID, "BOT iniciado", "");
  bot.sendMessage(CHAT_ID, "SE PUEDE PEDIR: TEMP ; GAS ; HUM ; LUZ", "");
  
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) 
  {
    Serial.println("Hora sincronizada");
  } else {
    Serial.println("Error al sincronizar hora");
  }

//***FIN WIFI***


//***BOTONES***

  pinMode(BOT1, INPUT);
  pinMode(BOT2, INPUT);
  pinMode(BOT3, INPUT);
  pinMode(BOT4, INPUT);
  pinMode(BOT5, INPUT);

//***FIN BOTONES***


//***SENSORES***

  //Sensor Luz
  pinMode(pinluz, INPUT);

  //Sensor Temp
  if (!aht.begin()) 
  {
    Serial.println("No se detectó AHTX0. Revisar conexiones.");
    while (1); // Detener ejecución si falla
  }
  Serial.println("AHTX0 detectado correctamente");
  
//***FIN SENSORES***


//***DISPLAY***

  lcd_1.init();
  lcd_1.backlight();

//***FIN DISPLAY***


//***EEPROM***

  umbral_eeprom.begin("umbrales", true); //Modo Lectura

  umbtemp = umbral_eeprom.getFloat("umbtemp", 24.0); //EEPROM TEMPERATURA
  umbgas  = umbral_eeprom.getFloat("umbgas", 24.0);  //EEPROM GAS
  umbhum  = umbral_eeprom.getFloat("umbhum", 24.0);  //EEPROM HUMEDAD
  umbluz  = umbral_eeprom.getFloat("umbluz", 24.0);  //EEPROM LUZ

  umbral_eeprom.end();

  Serial.println("---Umbrales---:");
  Serial.print("Temp: "); 
  Serial.println(umbtemp);

  Serial.print("Gas: "); 
  Serial.println(umbgas);

  Serial.print("Humedad: ");
  Serial.print(umbhum);

  Serial.print("Luz: "); 
  Serial.println(umbluz);

//***FIN EEPROM***
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() 
{
  timer = millis();


//***BOTONES***

  lecb1 = digitalRead(BOT1);
  lecb2 = digitalRead(BOT2);
  lecb3 = digitalRead(BOT3);
  lecb4 = digitalRead(BOT4);
  lecb5 = digitalRead(BOT5);

//***FIN BOTONES***

  switch (ESTADO)
  {
    //////////////////////PANTALLA1//////////////////////
    case PANTALLA1:

  //RECIBIR TIEMPO
  unsigned long timestamp = recibirTiempoTimestamp();

//***DISPLAY***

    lcd_1.setCursor(0, 0);

    if (lectura_seleccionada == 1)
    {
      lcd_1.print("TEMP:");
      lcd_1.print(lectemp);
    }

    if (lectura_seleccionada == 2)
    {
      lcd_1.print("LUZ:");
      lcd_1.print(mapluz);
    }

    if (lectura_seleccionada == 3)
    {
      lcd_1.print("HUMEDAD:");
      lcd_1.print(maphum);
    }

    if (lectura_seleccionada == 4)
    {
      lcd_1.print("GAS:");
      lcd_1.print(mapgas);
    }

//***FIN DISPLAY***
  
//***SENSORES***

    //Sensor Gas
    lecgas = analogRead(pingas); //Lectura gas

    //Sensor Luz
    lecluz = analogRead(pinluz); //Lectura Luz
    
    //Sensor Temp
    sensors_event_t humidity, temp;
    aht.getEvent(&humidity, &temp);
    
    lectemp = temp.temperature; //Lectura Temp en C°
    lechum = humidity.relative_humidity; //Lectura de humedad en %

    //MAPEO
    mapgas = map(lecgas, 0, 4095, 0, 100);
    mapluz = map(lecluz, 0, 4095, 0, 100);
    maphum = lechum; //NO HAY MAPEO
    //Temperatura tampoco tiene mapeo

  //SI SE SUPERAN LOS UMBRALES: (TELEGRAM)

    //TEMPERATURA
    if (lectemp > umbtemp && checkeotemp == 0)
    {
      //ESTADO = UMBRAL_TEMP_SUPERADO;
      bot.sendMessage(CHAT_ID, "Se superó el umbral de temperatura, TEMP ACTUAL: " + String(lectemp), "");
      checkeotemp = 1;
    }
    if (lectemp < umbtemp)
    {
      checkeotemp = 0;
    }

    //GAS
    if (mapgas > umbgas && checkeogas == 0)
    {
      //ESTADO = UMBRAL_GAS_SUPERADO;
      bot.sendMessage(CHAT_ID, "Se superó el umbral de gas, GAS ACTUAL: " + String(mapgas), "");
      checkeogas = 1;
    }
    if (mapgas < umbgas)
    {
      checkeogas = 0;
    }

    //LUZ
    if (mapluz > umbluz && checkeoluz == 0)
    {
      //ESTADO = UMBRAL_LUZ_SUPERADO;
      bot.sendMessage(CHAT_ID, "Se superó el umbral de luz, LUZ ACTUAL: " + String(mapluz), "");
      checkeoluz = 1;
    }
    if (mapluz < umbluz)
    {
      checkeoluz = 0;
    }

    //HUMEDAD
    if (maphum > umbhum && checkeohum == 0)
    {
      //ESTADO = UMBRAL_HUM_SUPERADO;
      bot.sendMessage(CHAT_ID, "Se superó el umbral de humedad, HUMEDAD ACTUAL: " + String(maphum), "");
      checkeohum = 1;
    }
    if (maphum < umbhum)
    {
      checkeohum = 0;
    }

  //Pedirle al bot que envie valores
  if (timer >= timer1000) //Esto ocurre una vez cada segundo
    { 
      int no_leidos = bot.getUpdates(bot.last_message_received + 1); //Se revisa si hay algún mensaje nuevo / no procesado
      
      if (no_leidos > 0) //Si hay algun mensaje no procesado
      {
        String recibido = bot.messages[0].text; //El nuevo mensaje se iguala a recibido

        if (recibido == "TEMP")
        {
          bot.sendMessage(CHAT_ID, "TEMP ACTUAL: " + String(lectemp), "");
        }
        if (recibido == "HUM")
        {
          bot.sendMessage(CHAT_ID, "HUMEDAD ACTUAL: " + String(maphum), "");
        }
        if (recibido == "GAS")
        {
          bot.sendMessage(CHAT_ID, "GAS ACTUAL: " + String(mapgas), "");
        }
        if (recibido == "LUZ")
        {
          bot.sendMessage(CHAT_ID, "LUZ ACTUAL: " + String(mapluz), "");
        }
      }

      //IMPRIMIR TIEMPO
      Serial.print("TIEMPO ACTUAL: ");
      Serial.println(recibirTiempoString());
      timer1000 = timer + 1000;
    }

  //FIN UMBRALES (FIN TELEGRAM)
    
//***FIN SENSORES***

    if (lecb1 == PRESIONADO)
    {
      ESTADO = CAMBIO_LECTURA;
    }

    break;

//////////////////////PANTALLA2//////////////////////
    case PANTALLA2:

//***DISPLAY***

    lcd_1.setCursor(0, 0);
    
    if (umbral_seleccionado == 1)
    {
      lcd_1.print("TEMP:");
      lcd_1.print(umbtemp);

      lcd_1.setCursor(0, 1);
      lcd_1.print("GMT:");
      lcd_1.print(GMT);
    }

    if (umbral_seleccionado == 2)
    {
      lcd_1.print("LUZ:");
      lcd_1.print(umbluz);

      lcd_1.setCursor(0, 1);
      lcd_1.print("GMT:");
      lcd_1.print(GMT);
    }

    if (umbral_seleccionado == 3)
    {
      lcd_1.print("HUMEDAD:");
      lcd_1.print(umbhum);

      lcd_1.setCursor(0, 1);
      lcd_1.print("GMT:");
      lcd_1.print(GMT);
    }

    if (umbral_seleccionado == 4)
    {
      lcd_1.print("GAS:");
      lcd_1.print(umbgas);

      lcd_1.setCursor(0, 1);
      lcd_1.print("GMT:");
      lcd_1.print(GMT);
    }

//***FIN DISPLAY***

    if (lecb1 == PRESIONADO)
    {
      ESTADO = SUMAR_GMT; 
    }

    if (lecb2 == PRESIONADO)
    {
      ESTADO = RESTAR_GMT;
    }
        
    if (lecb3 == PRESIONADO)
    {
      ESTADO = CAMBIO_UMBRAL;
    }
        
    if (lecb4 == PRESIONADO)
    {
      ESTADO = SUMAR_UMBRAL;
    }
   
    if (lecb5 == PRESIONADO)
    {
      ESTADO = RESTAR_UMBRAL;
    }
    
    break;

    case CAMBIO_LECTURA: //CAMBIAR ESTO PARA AGREGAR QUE TAMBIEN SE HAGA DISPLAY DE LA HORA

    if (lecb1 == SOLTADO)
    {
      lectura_seleccionada = lectura_seleccionada + 1;
      lcd_1.clear();

      if (lectura_seleccionada > 4) 
      {
        lectura_seleccionada = 1;
      }

      ESTADO = PANTALLA1;
    }

    if(lecb2 == PRESIONADO)
    {
      lcd_1.clear();
      ESTADO = FASE1;
    }

    break;

    case FASE1:

    if (lecb1 == SOLTADO && lecb2 == SOLTADO)
    {
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    break;

    case FASE2:

    if (lecb1 == SOLTADO && lecb2 == SOLTADO)
    {
      lcd_1.clear();
      ESTADO = PANTALLA1;


//***EEPROM***

      umbral_eeprom.begin("umbrales", false);

      umbral_eeprom.putFloat("umbtemp", umbtemp); //Actualizar Temperatura
      umbral_eeprom.putFloat("umbgas", umbgas);   //Actualizar Gas
      umbral_eeprom.putFloat("umbhum", umbhum);   //Actualizar Humedad
      umbral_eeprom.putFloat("umbluz", umbluz);   //Actualizar Luz

      Serial.print("Umbral de Temperatura actualizado: ");
      Serial.println(umbtemp);

      Serial.print("Umbral de Gas actualizado: ");
      Serial.println(umbgas);

      Serial.print("Umbral de Humedad actualizado: ");
      Serial.println(umbhum);

      Serial.print("Umbral de Luz actualizado: ");
      Serial.println(umbluz);

      umbral_eeprom.end();

//***FIN EEPROM***

    }

    break;

    case CAMBIO_UMBRAL:

    if (lecb3 == SOLTADO)
    {
      umbral_seleccionado = umbral_seleccionado + 1;
      lcd_1.clear();

      if (umbral_seleccionado > 4) 
      {
        umbral_seleccionado = 1;
      }

      ESTADO = PANTALLA2;
    }

    break;

    case SUMAR_UMBRAL:

    if (umbral_seleccionado == 1 && lecb4 == SOLTADO)
    {
      umbtemp = umbtemp + 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 2 && lecb4 == SOLTADO)
    {
      umbluz = umbluz + 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 3 && lecb4 == SOLTADO)
    {
      umbhum = umbhum + 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 4 && lecb4 == SOLTADO)
    {
      umbgas = umbgas + 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    break;  

    case RESTAR_UMBRAL:

    if (umbral_seleccionado == 1 && lecb5 == SOLTADO)
    {
      umbtemp = umbtemp - 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 2 && lecb5 == SOLTADO)
    {
      umbluz = umbluz - 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 3 && lecb5 == SOLTADO)
    {
      umbhum = umbhum - 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (umbral_seleccionado == 4 && lecb5 == SOLTADO)
    {
      umbgas = umbgas - 1;
      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    break;

    case SUMAR_GMT:

    if (lecb1 == SOLTADO)
    {
      GMT = GMT + 1;

      if (GMT > 12)
      {
        GMT = 12;
      }

      gmtOffset_sec = GMT * 3600;
      configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (lecb2 == PRESIONADO)
    {
      ESTADO = FASE2;
    }

    break;

    case RESTAR_GMT:

    if (lecb2 == SOLTADO)
    {
      GMT = GMT - 1;

      if (GMT < -12)
      {
        GMT = -12;
      }

      gmtOffset_sec = GMT * 3600;
      configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

      lcd_1.clear();
      ESTADO = PANTALLA2;
    }

    if (lecb1 == PRESIONADO)
    {
      ESTADO = FASE2;
    }

    break;
  }
}

unsigned long recibirTiempoTimestamp() 
{
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) 
  {
    Serial.println("Error al obtener hora desde NTP");
    return 0;
  }
  return mktime(&timeinfo);
}

String recibirTiempoString() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return "Error tiempo";
  }
  char buffer[9];
  sprintf(buffer, "%02d:%02d:%02d", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
  return String(buffer);
}
